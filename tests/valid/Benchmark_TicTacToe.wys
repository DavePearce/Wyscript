type nat is int

// ==================================================================
// A square on the board is either blank, or holds either a circle or
// cross.
// ==================================================================
constant BLANK is 0
constant CIRCLE is 1
constant CROSS is 2

type Square is int

// ==================================================================
// A board consists of 9 squares, and a move counter
// ==================================================================
type Board is {
    nat move,
    [Square] pieces // 3 x 3
}

// ==================================================================
// An empty board is one where all pieces are blank
// ==================================================================
Board EmptyBoard():
    return {
        move: 0,
        pieces: [BLANK,BLANK,BLANK,
                 BLANK,BLANK,BLANK,
                 BLANK,BLANK,BLANK]
    }

// ===============================================================
// Playing a piece requires an blank square, and returns the board
// updated with the piece at that position and an incremented the move
// counter.
// ===============================================================
Board play(Board b, nat pos):
    // decide who's moving
    if b.move % 2 == 0:
        // circle on even moves
        b.pieces[pos] = CIRCLE
    else:
        // cross on odd moves
        b.pieces[pos] = CROSS
    // update the move counter
    b.move = b.move + 1
    // done
    return b

// ===============================================================
// Helper Method
// ===============================================================
int countOf([Square] pieces, Square s):
    int count = 0
    for i in 0..|pieces|:
        if pieces[i] == s:
            count = count + 1
    
    return count

// ===============================================================
// Test Game
// ===============================================================
constant GAME is [0,1,2,3,4,5,6,7,8]

void main():
    Board b = EmptyBoard()
    for p in GAME:
        print "BOARD: " ++ b
        print "MOVE: " ++ p
        if p < 0 || p > 9 || b.pieces[p] != BLANK || b.move == 9:
            print "INVALID MOVE!"
            return
        else:
            b = play(b,p)