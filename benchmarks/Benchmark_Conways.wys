void main():
        int iterations = 50
        int gridX = 50
        int gridY = 50
        [[int]] grid1 = conway_cpu(iterations,gridX,gridY)
        [[int]] grid2 = conway_cpu(iterations,gridX,gridY)
        if (grid1 == grid2):
                print "match"
        else:
                print "fail"

[[int]] conway_cpu(int iterations, int gridX , int gridY):
        [[int]] grid = generate_glider_grid(gridX,gridY)
        [[int]] newgrid = generate_grid(gridX,gridY)
        [[int]] tempgrid = [[]]
        int n = 0
        while (n < iterations):
                for x in 0..gridX :
                        for y in 0..gridY:
                                int count = 0
                                if (x-1>=0):
                                        if (grid[y][x-1]==1):
                                                        count = count + 1
                                        if (y+1 < gridY):
                                                if (grid[y+1][x-1] == 1):
                                                        count = count + 1
                                        if (y-1>=0):
                                                if (grid[y-1][x-1] == 1):
                                                        count = count + 1
                                if (y-1 >= 0):
                                        if (grid[y-1][x] == 1):
                                                count = count + 1
                                if (y+1<gridY):
                                        if (grid[y+1][x] == 1):
                                                count = count + 1
                                if (x+1<gridX):
                                        if (grid[y][x+1]==1):
                                                        count = count + 1
                                        if (y+1 < gridY):
                                                if (grid[y+1][x+1]==1):
                                                        count = count + 1
                                        if (y-1>=0):
                                                if (grid[y-1][x+1]==1):
                                                        count = count + 1
                                if (count < 2):
                                        newgrid[y][x] = 0
                                else:
                                        if ( (count>3)):
                                                newgrid[y][x] = 0
                                        else:
                                                if ((count == 3)):
                                                        newgrid[y][x] = 1
                                                if (count==2 && grid[y][x] == 1):
                                                        newgrid[y][x] = 1
                tempgrid = grid
                grid = newgrid
                newgrid = tempgrid
                n = n + 1
        return grid

[[int]] generate_grid(int x , int y):
        if (y <= 0):
                return []
        int i = 0
        [int] row = []
        while (i < x):
                row = row ++ [0]
                i = i + 1
        return [row] ++ generate_grid(x,y-1)

[[int]] generate_glider_grid(int x , int y):
        if (y <= 0):
                return []
        int i = 0
        [int] row = []
        while (i < x):
                row = row ++ [0]
                if (y % 3 == 2 && i % 6 >= 3):
                        row[i] = 1
                else if (i % 6 == 5 && y % 3 == 1):
                        row[i] = 1
                else if (i % 6 == 4 && y % 3 == 0):
                        row[i] = 1
                i = i + 1
        return [row] ++ generate_glider_grid(x,y-1)
