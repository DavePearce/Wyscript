native function setCanvas(int x, int y, int iter) => void

function diff((real, real) tuple) => real:
    real x
    real y
    x, y = tuple
    return (y-x)

function first((real, real) tuple) => real:
    real a
    real b
    a, b = tuple
    return a

function mandelbrot(int max, (real, real) xScale, (real, real) yScale) => void:
    real xDiff = diff(xScale)
    real yDiff = diff(yScale)
    real zx = xDiff/600.0
    real zy = yDiff/600.0
    
    for i in 0..600:
        for j in 0..600:
            real x0 = (((real)i)*zx)+first(xScale)
            real y0 = (((real)j)*zy)+first(yScale)
            real x = 0.0
            real y = 0.0
            int n = 0
            while ((x*x + y*y) < 4 && n < max):
                real tmp = ((x*x) - (y*y)) + x0
                y = (2.0*x*y) + y0
                x = tmp
                n = n+1
            setCanvas(i, j, n)
