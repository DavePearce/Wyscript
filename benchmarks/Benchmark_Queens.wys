type nat is int

type Pos is [int]

nat abs(int i):
    if (i < 0):
        return -i
    else:
        return i

bool conflict(Pos p, nat row, nat col):
    int r = p[0]
    int c = p[1]
    if r == row || c == col:
        return true
    int colDiff = 0
    int rowDiff = 0
    
    colDiff = abs(c - col)
    rowDiff = abs(r - row)
    return colDiff == rowDiff

[[Pos]] run([Pos] queens, nat n, int dim):
    if dim == n:
        return [queens]
    else:
        [[Pos]] solutions = []
        for col in 0 .. dim:
            if n < |queens| && dim == |queens|:
                bool solution = true
                int i = 0
                while i < n && solution:
                    if n < |queens| && i >= 0 && dim == |queens| && solution:
                        Pos p = queens[i]
                        if conflict(p,n,col):
                            solution = false
                        else:
                            i = i + 1
                if solution:
                    queens[n] = [n,col]
                    solutions = solutions ++ run(queens,n+1,dim)
        return solutions

void main():
    int dim = 10
    [Pos] init = []
    for i in 0..dim:
        init = init ++ [[0,0]]
    [[Pos]] solutions = run(init,0,dim)
    print (("Found " ++ |solutions|) ++ " solutions.")
